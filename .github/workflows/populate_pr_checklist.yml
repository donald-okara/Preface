name: Sync Deliverables from Issue to PR

on:
  issues:
    types: [edited]
  pull_request:
    types: [opened, synchronize, edited]
  workflow_dispatch:

jobs:
  sync-deliverables:
    runs-on: ubuntu-latest
    steps:
      - name: Sync Deliverables from Issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            if (!pr) {
              console.log("No PR found in payload.");
              return;
            }

            const issueMatch = pr.body.match(/(?:Closes|Fixes)\s+#(\d+)/i);
            if (!issueMatch) {
              console.log("No linked issue found.");
              return;
            }

            const issueNumber = issueMatch[1];

            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });

            const issueBody = issue.data.body || "";
            const checklistMatches = issueBody.match(/- \[( |x)\] .+/g) || [];

            const deliverables = checklistMatches.map(line => {
              const isChecked = line.includes("[x]");
              return `- ${isChecked ? "✅" : "❌"} ${line.replace(/- \[[ x]\] /, '')}`;
            }).join("\n");

            const newDeliverablesSection = `## 🚧 Deliverables Progress (from Issue #${issueNumber}) 📦\n${deliverables}\n`;

            // Remove old deliverables section if it exists
            const bodyWithoutOld = pr.body.replace(/## 🚧 Deliverables Progress \(from Issue #\d+\) 📦[\s\S]*?(?=(##|$))/, '').trim();

            const updatedBody = `${bodyWithoutOld}\n\n${newDeliverablesSection}`.trim();

            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number,
              body: updatedBody
            });
