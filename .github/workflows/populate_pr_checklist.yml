name: Sync Deliverables from Issue to PR

on:
  issues:
    types: [edited]
  pull_request:
    types: [opened, synchronize, edited]
  workflow_dispatch:

jobs:
  sync-deliverables:
    runs-on: ubuntu-latest
    steps:
      - name: Sync Deliverables from Linked Issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            let prBody = pr?.body || "";

            // Extract linked issue number from PR title or body
            const titleMatch = pr?.title.match(/#(\d+)/);
            const bodyMatch = prBody.match(/Closes\s+#(\d+)/i);
            const issueNum = titleMatch?.[1] || bodyMatch?.[1];

            if (!issueNum) {
              console.log("No linked issue found in PR.");
              return;
            }

            // Fetch linked issue
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNum
            });

            const issueBody = issue.data.body || "";
            const checklistItems = issueBody.match(/- \[.\] .+/g) || [];

            // Convert checklist to emoji format
            const emojiList = checklistItems.map(line => {
              const checked = line.includes('[x]');
              return `- ${checked ? '‚úÖ' : '‚ùå'} ${line.replace(/- \[.\] /, '')}`;
            }).join('\n');

            // Only update the "Deliverables from Issue" section if it exists
            const deliverablesSectionRegex = /(## üöß Deliverables from Issue\n\n)([^]*?)(\n---)/;
            
            if (deliverablesSectionRegex.test(prBody)) {
              // Replace existing deliverables content
              prBody = prBody.replace(
                deliverablesSectionRegex,
                `$1${emojiList}$3`
              );
            } else {
              // If section doesn't exist, prepend new structure (for new PRs)
              const fullTemplate = `
                ## ‚ú® Description
            
                <!-- Describe what this PR does -->
            
                ---
            
                ## üêõ Related Issue
            
                Closes #${issueNum}
            
                ---
            
                ## üöß Deliverables from Issue
            
                ${emojiList}
            
                ---
            
                ## ‚úÖ Checklist
            
                - [ ] Code compiles
                - [ ] Tests updated
                - [ ] Documentation updated
            
                ---
                `.trim();
              prBody = fullTemplate + '\n\n' + prBody;
            }

            // Update PR body only if changes are detected
            if (prBody !== pr.body) {
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                body: prBody
              });
            }