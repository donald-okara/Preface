name: Sync Deliverables Between Issues and PRs

on:
  issues:
    types: [edited]
  pull_request:
    types: [opened, edited, synchronize]
  workflow_dispatch:

jobs:
  sync-deliverables:
    runs-on: ubuntu-latest
    steps:
      - name: Sync Checklist <> Deliverables
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { issue, pull_request: pr } = context.payload;
            const isIssueEvent = !!issue;
            const repoInfo = { 
              owner: context.repo.owner, 
              repo: context.repo.repo 
            };

            // Get target issue number
            let targetIssueNumber;
            if (isIssueEvent) {
              targetIssueNumber = issue.number;
            } else if (pr) {
              const prBody = pr.body || "";
              const titleMatch = pr.title.match(/#(\d+)/);
              const bodyMatch = prBody.match(/(Closes|Fixes)\s+#(\d+)/i);
              targetIssueNumber = titleMatch?.[1] || bodyMatch?.[2];
            }

            if (!targetIssueNumber) {
              console.log('No linked issue found');
              return;
            }

            // Get all PRs linked to this issue
            const searchQuery = `is:pr Closes #${targetIssueNumber} repo:${repoInfo.owner}/${repoInfo.repo}`;
            const searchResults = await github.rest.search.issuesAndPullRequests({
              q: searchQuery
            });

            const linkedPRs = searchResults.data.items;

            // Process issue checklist
            const targetIssue = await github.rest.issues.get({
              ...repoInfo,
              issue_number: targetIssueNumber
            });
            
            const issueBody = targetIssue.data.body || "";
            const checklistItems = issueBody.match(/- \[.\] .+/g) || [];
            const emojiList = checklistItems.map(line => {
              const checked = line.includes('[x]');
              return `- ${checked ? '‚úÖ' : '‚ùå'} ${line.replace(/- \[.\] /, '')}`;
            }).join('\n');

            // Update all linked PRs
            for (const linkedPR of linkedPRs) {
              let prBody = linkedPR.body || "";
              const deliverablesPattern = /(## üöß Deliverables from Issue\n)([^]*?)(\n---)/s;

              if (deliverablesPattern.test(prBody)) {
                const updatedBody = prBody.replace(
                  deliverablesPattern,
                  `$1${emojiList}\n$3`
                );
            
                // Only update if changes detected
                if (updatedBody !== prBody) {
                  await github.rest.pulls.update({
                    ...repoInfo,
                    pull_number: linkedPR.number,
                    body: updatedBody
                  });
                  console.log(`Updated PR #${linkedPR.number}`);
                }
              }
            }