name: Sync Deliverables from Issue to PR

on:
  issues:
    types: [edited]
  pull_request:
    types: [opened, edited, synchronize]
  workflow_dispatch:

jobs:
  sync-deliverables:
    runs-on: ubuntu-latest
    steps:
      - name: Sync Deliverables Section from Issue to PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const issue = context.payload.issue;

            // Get PR context (if available)
            let prNumber = pr?.number;
            let prTitle = pr?.title || '';
            let prBody = pr?.body || '';

            if (!pr && context.eventName === 'issues') {
              // Manual issue edit trigger - find all PRs referencing this issue
              const issueNumber = issue.number;
              const linkedPRs = await github.paginate(
                github.rest.issues.listEventsForTimeline,
                {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  per_page: 100,
                }
              );

              const prNumbers = linkedPRs
                .filter(event => event.event === 'cross-referenced' && event.source?.issue?.pull_request)
                .map(event => event.source.issue.number);

              for (const prNum of prNumbers) {
                await updatePR(prNum, issueNumber);
              }
              return;
            }

            // Otherwise, PR-based trigger: extract issue number
            const content = `${prTitle}\n${prBody}`;
            const match = content.match(/(?:Closes|Fixes|Fix)\s+#(\d+)/i);

            if (!match) {
              console.log("No linked issue found in PR title/body.");
              return;
            }

            const issueNumber = match[1];
            await updatePR(prNumber, issueNumber);

            // Function: Sync deliverables to PR
            async function updatePR(prNum, issueNum) {
              const issueData = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNum
              });

              const issueBody = issueData.data.body || "";

              // Extract deliverables section from issue
              const deliverablesMatch = issueBody.match(/##\s*Deliverables([\s\S]*?)(##|$)/i);
              const deliverablesBlock = deliverablesMatch ? deliverablesMatch[1].trim() : "";

              const lines = deliverablesBlock
                .split('\n')
                .map(line => line.trim())
                .filter(line => line);

              let emojiList = lines.map(line => {
                const isChecked = line.startsWith('- [x]');
                const text = line.replace(/^- \[[ xX]\] /, '');
                return `- ${isChecked ? '✅' : '❌'} ${text}`;
              }).join('\n');

              const newSection = `## 🚧 Deliverables Progress (from Issue #${issueNum}) 📦\n${emojiList}`;

              // Fetch current PR body
              const currentPR = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNum
              });

              let originalBody = currentPR.data.body || "";

              // Remove existing deliverables section (if present)
              const cleanedBody = originalBody.replace(/## 🚧 Deliverables Progress \(from Issue #\d+\) 📦[\s\S]*/i, '').trim();

              const updatedBody = `${cleanedBody.trim()}\n\n${newSection}`.trim();

              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNum,
                body: updatedBody
              });

              console.log(`Updated PR #${prNum} with deliverables from Issue #${issueNum}`);
            }
