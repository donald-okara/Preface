name: Sync Deliverables from Issue to PR

on:
  issues:
    types: [edited]
  pull_request:
    types: [opened, synchronize, edited]
  workflow_dispatch:

jobs:
  sync-deliverables:
    runs-on: ubuntu-latest
    steps:
      - name: Sync Deliverables from Linked Issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            let prBody = pr?.body || "";

            // Extract linked issue number
            const titleMatch = pr?.title.match(/#(\d+)/);
            const bodyMatch = prBody.match(/Closes\s+#(\d+)/i);
            const issueNum = titleMatch?.[1] || bodyMatch?.[1];

            if (!issueNum) {
              console.log("No linked issue found in PR.");
              return;
            }

            // Fetch linked issue
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNum
            });

            const issueBody = issue.data.body || "";
            const checklistItems = issueBody.match(/- \[.\] .+/g) || [];

            // Convert checklist to emoji format
            const emojiList = checklistItems.map(line => {
              const checked = line.includes('[x]');
              return `- ${checked ? '‚úÖ' : '‚ùå'} ${line.replace(/- \[.\] /, '')}`;
            }).join('\n');

            // Improved regex pattern with non-greedy match
            const deliverablesPattern = /(## üöß Deliverables from Issue\n\s*)([^]*?)(\n\s*---)/;

            if (deliverablesPattern.test(prBody)) {
              // Update existing section
              prBody = prBody.replace(
                deliverablesPattern,
                `$1${emojiList}$3`
              );
            } else {
              // Inject just the deliverables section if missing
              const deliverablesSection = `
            
            ## üöß Deliverables from Issue
              
              ${emojiList}
            
            ---
              `;
              // Find the first --- separator after Related Issue
              const relatedIssueSection = prBody.match(/## üêõ Related Issue\n.*?---/s);
              if (relatedIssueSection) {
              prBody = prBody.replace(
              relatedIssueSection[0],
              `${relatedIssueSection[0]}\n${deliverablesSection}`
              );
              } else {
              // Fallback for PRs with unexpected structure
              prBody = `## üöß Deliverables from Issue\n\n${emojiList}\n\n---\n\n${prBody}`;
              }
              }
              
              // Clean up existing formatting
              prBody = prBody
              .replace(/^\s+</mg, '<')  // Remove leading whitespace before comments
              .replace(/\n{3,}/g, '\n\n');  // Reduce excessive newlines
              
              // Update only if changes detected
              if (prBody !== pr.body) {
              await github.rest.pulls.update({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: pr.number,
            body: prBody
            });
            }